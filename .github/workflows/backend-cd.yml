name: backend CD

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.5'
          cache-dependency-path: backend/go.sum

      - name: cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: check Go formatting
        working-directory: ./backend
        run: |
          unformatted=$(gofmt -l .)
          if [ -n "$unformatted" ]; then
            echo "The following files are not formatted:"
            echo "$unformatted"
            exit 1
          fi

      - name: download dependencies
        working-directory: ./backend
        run: go mod download

      - name: run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: ./backend
          args: --timeout=5m

      - name: run tests with race detector
        working-directory: ./backend
        run: go test -race -v ./...

      - name: set up build variables
        id: vars
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)
          BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$COMMIT_SHA" >> $GITHUB_OUTPUT

      - name: set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.vars.outputs.COMMIT_SHA }}

      - name: build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            COMMIT_SHA=${{ steps.vars.outputs.COMMIT_SHA }}
            BUILD_TIME=${{ steps.vars.outputs.BUILD_TIME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: generate deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA:** \`${{ steps.vars.outputs.COMMIT_SHA }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time:** ${{ steps.vars.outputs.BUILD_TIME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.COMMIT_SHA }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Tags:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
